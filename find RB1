# -*- coding: utf-8 -*-
"""
Created on Thu Aug 31 13:13:04 2017

@author: Sarah
"""
import numpy as np

import random, sys, string, requests, json, hmac, hashlib, datetime, math, time, traceback

publicConsumerToken = 'hzl8uif7o3'
privateConsumerToken = 'o384wco2l0612m0gmt481ka57t'
url = 'https://api.denovodna.com/'

import urllib3
import certifi

http = urllib3.PoolManager(
    cert_reqs='CERT_REQUIRED', # Force certificate check.
    ca_certs=certifi.where(),  # Path to the Certifi bundle.
)

params = {}

def sendPost(methodName, params = {}):
    """Function to send a RESTful POST to the DNA Compiler's API using the params dictionary.
    Returns a JSON serialized dictionary containing all output from the API call.

    Authorization requires:
    1.  publicConsumerToken,    this alphanumeric string is assigned to your organization/lab/company
    2.  datetime stamp,         the current datetime in UTC/GMT time zone and ISO 8601 format.
                                Example: 2014-01-06T15:22:02+00:00
    3.  HMAC signature,         this hash-based authentication message (HMAC) is generated by
                                concatenating the publicConsumerToken, the timestamp, and the
                                method's name, and then performing a hexadecimal digest on it
                                using the privateConsumerToken as the key.
    *** Do not send the privateConsumerToken to anyone or anything. Keep it private! ***"""

    params['publicConsumerToken'] = publicConsumerToken
    params['timestamp'] = datetime.datetime.utcnow().isoformat()

    message = publicConsumerToken + params['timestamp'] + methodName
    params['signature'] = hmac.new(privateConsumerToken, message, hashlib.sha1).hexdigest()
    headers = {'Content-type': u'application/json', 'Accept': u'application/json'}

    try_counter = 0
    maxNumberAttempts = 5
    while True:
        r = requests.post(url + methodName,verify=True, data=json.dumps(params), headers=headers)
        print r
        print r.text
        print r.headers
        output = r.json()
        if output['status'] == 'CREATED':
            break
        elif try_counter > maxNumberAttempts:
            break
        elif output['status'] == 'UNAUTHORIZED':
            try_counter += 1
            time.sleep(.5)        
        else:
            try_counter += 1
            
    return output
    

def sendGet(methodName, params = {}):
    """Function to send a RESTful GET to the DNA Compiler's API using the params dictionary.
        Returns a JSON serialized dictionary containing all output from the API call.

        Authorization requires:
        1.  publicConsumerToken,    this alphanumeric string is assigned to your organization/lab/company
        2.  datetime stamp,         the current datetime in UTC/GMT time zone and ISO 8601 format.
                                    Example: 2014-01-06T15:22:02+00:00
        3.  HMAC signature,         this hash-based authentication message (HMAC) is generated by
                                    concatenating the publicConsumerToken, the timestamp, and the
                                    method's name, and then performing a hexadecimal digest on it
                                    using the privateConsumerToken as the key.
        *** Do not send the privateConsumerToken to anyone or anything. Keep it private! ***
    """
    params['publicConsumerToken'] = publicConsumerToken
    params['timestamp'] = datetime.datetime.utcnow().isoformat()

    message = publicConsumerToken + params['timestamp'] + methodName
    params['signature'] = hmac.new(privateConsumerToken, message, hashlib.sha1).hexdigest()
    headers = {'Content-type': u'application/json', 'Accept': u'application/json'}

    r = requests.get(url + methodName,verify=True, params=params, headers=headers)
    try:
        return r.json()
    except Exception:
        print "Error Traceback:", traceback.format_exc()
        print r

def sendDelete(methodName, params = {}):
    """Function to send a RESTful DELETE to the DNA Compiler's API using the params dictionary.
    Returns a JSON serialized dictionary containing all output from the API call.

    Authorization requires the following keys and values:
    1.  publicConsumerToken,    this alphanumeric string is assigned to your organization/lab/company
    2.  datetime stamp,         the current datetime in UTC/GMT time zone and ISO 8601 format.
                                Example: 2014-01-06T15:22:02+00:00
    3.  HMAC signature,         this hash-based authentication message (HMAC) is generated by
                                concatenating the publicConsumerToken, the timestamp, and the
                                method's name, and then performing a hexadecimal digest on it
                                using the privateConsumerToken as the key.
    *** Do not send your privateConsumerToken to anyone or anything. Keep it private! ***"""

    params['publicConsumerToken'] = publicConsumerToken
    params['timestamp'] = datetime.datetime.utcnow().isoformat()

    message = publicConsumerToken + params['timestamp'] + methodName
    params['signature'] = hmac.new(privateConsumerToken, message, hashlib.sha1).hexdigest()
    headers = {'Content-type': u'application/json', 'Accept': u'application/json'}

    r = requests.delete(url + methodName,verify=True, params=params, headers=headers)
    return r.json()

#-----------------------------------------------------------------------------------------
#   DNA COMPILER DESIGN METHODS ARE BELOW
#-----------------------------------------------------------------------------------------
def ReverseRBS(mRNA, startRange = None, rRNASeq = "acctcctta", algorithmVersion = "v1.1"):
    """Calls the RBS Calculator in Reverse Engineering mode to predict the translation
    initiation rate of each start codon in a mRNA sequence.
    Input keys include:
    1.  mRNA,               The nucleotide sequence of the 5' untranslated region and
                            protein coding sequence, including 50+ nt after the start codon.

    2.  startRange,         An optional two-element list [begin position, end position]. If included,
                            will only consider start codons within the range provided. If not included,
                            the entire mRNA sequence will be considered.

    3.  rRNASeq,            The last 9 nucleotides of the 16S rRNA (3' end). Depends on bacterial strain.

    4.  algorithmVersion,   v1.0 is described in Salis, Mirsky, & Voigt,  Nature Biotech, 2009.
                            v1.1 improvements are described in Salis, Methods in Enzymology, 2011.
                            v1.2 improvements are described in Espah Borujeni, Channasappara, & Salis,
                            Nucleic Acid Research, 2013.

    The output is a JSON serialized dictionary containing all inputs and the following results:
    1.  Max_translation_initiation_rate,    The maximum translation initiation rate from all start codons.
    2.  Min_translation_initiation_rate,    The minimum translation initiation rate from all start codons.
    3.  Number_start_codons,                The number of start codons within the startRange of the mRNA sequence.
    4.  RBS_list,   A list of predictions, one for each start codon in the mRNA sequence. Each element
                    in the list is a dictionary containing:
        a.  tir,                            The predicted translation initiation rate.
        b.  dG_total,                       The ribosome's Gibbs binding free energy to the mRNA.
        c.  dG_mRNA_rRNA,                   The Gibbs free energy of the mRNA:rRNA complex.
                                            The complex includes both hybridization and intra-molecular folding.
        d.  dG_mRNA,                        The Gibbs free energy of the folded mRNA (minimum free energy).
        e.  dG_spacing,                     The Gibbs free energy penalty for stretching/compression of the
                                            ribosome, due to non-optimal spacing between the rRNA binding site
                                            and the start codon.
        f.  dG_standby,                     The Gibbs binding free energy of the 30S ribosome's platform domain
                                            to standby sites located upstream of the Shine-Dalgarno sequence.
        g.  dG_start,                       The Gibbs binding free energy between the initiating tRNA and the start codon.
        h.  warnings,                       List of warnings issued. Each warning is the tuple (a color, a code, a message).

    5.  JobInfo,    A dictionary containing run-time information:
        a.  status,     The status of the computational job; either CREATED, Queued, Running,
                        Checkpointed, Finished, Deleted, Stopped, or Killed.
        b.  queueDateTime,  The datetime when the job was queued (UTC timezone, isoformat).
        c.  runDateTime,    The datetime when the job was initially run (UTC, isoformat).
        d.  id,             A unique id.  The id has the form [publicConsumerToken]::[unique alphanumeric].
        e.  href,           A unique URL to retrieve the result using a RESTful GET.
        f.  jobQueue,       The queue responsible for distributing the job.

"""

    algorithm = 'ReverseRBS'
    params = {}
    params['mRNA'] = mRNA
    if startRange is None:
        params['start_range'] = [0, len(mRNA)]
    else:
        params['start_range'] = startRange
    params['16S_rRNA'] = rRNASeq
    params['algorithm_version'] = algorithmVersion
    params['algorithm'] = algorithm

    response = sendPost(algorithm, params)
    return response

def ForwardRBS(CDS, TargetTranslationRate = 1000, rRNASeq = "acctcctta", preSeq = "", RBSInit = None, maximizeTIR = False, algorithmVersion = "v1.1"):
    """Calls the RBS Calculator in Forward Engineering mode to design a ribosome binding site sequence with a targeted
    translation initiation rate.

    Input keys include:
    1.  CDS,                The nucleotide sequence of protein coding sequence, including 50+ nt after the start codon.

    2.  TargetTranslationRate,         The targeted translation initiation rate on a proportional scale from >0 to up to 5.4 million.

    3.  preSeq,             Any mRNA sequence that must appear before the ribosome binding site sequence beginning at the +1.

    4.  rRNASeq,            The last 9 nucleotides of the 16S rRNA (3' end). Depends on bacterial strain.

    5.  RBSInit,            An initial ribosome binding site sequence to begin the optimization. A well-chosen
                            initial sequence will accelerate optimization, particularly when designing an RBS
                            with a very high or very low translation initiation rate.

    6.  maximizeTIR,        True or False. If True, the target translation rate will be set to the maximum possible
                            and optimization will continue for 2000 iterations.

    7.  algorithmVersion,   v1.0 is described in Salis, Mirsky, & Voigt,  Nature Biotech, 2009.
                            v1.1 improvements are described in Salis, Methods in Enzymology, 2011.
                            v1.2 improvements are described in Espah Borujeni, Channasappara, & Salis,
                            Nucleic Acid Research, 2013.

    The output is a JSON serialized dictionary containing all inputs and the following results:
    1.  RBS,                            The designed ribosome binding site sequence
    2.  translation_initiation_rate,    The predicted translation initiation rate of the designed RBS sequence.
    3.  iterations,                     The number of iterations performed by the optimization algorithm.
    4.  MaxIter,                        The maximum number of iterations allowed.

    5.  RBS_list,   A list of predictions, one for each start codon in the mRNA sequence. Each element
                    in the list is a dictionary containing:
        a.  tir,                            The predicted translation initiation rate.
        b.  dG_total,                       The ribosome's Gibbs binding free energy to the mRNA.
        c.  dG_mRNA_rRNA,                   The Gibbs free energy of the mRNA:rRNA complex.
                                            The complex includes both hybridization and intra-molecular folding.
        d.  dG_mRNA,                        The Gibbs free energy of the folded mRNA (minimum free energy).
        e.  dG_spacing,                     The Gibbs free energy penalty for stretching/compression of the
                                            ribosome, due to non-optimal spacing between the rRNA binding site
                                            and the start codon.
        f.  dG_standby,                     The Gibbs binding free energy of the 30S ribosome's platform domain
                                            to standby sites located upstream of the Shine-Dalgarno sequence.
        g.  dG_start,                       The Gibbs binding free energy between the initiating tRNA and the start codon.
        h.  warnings,                       List of warnings issued. Each warning is the tuple (a color, a code, a message).

    6.  JobInfo,    A dictionary containing run-time information:
        a.  status,     The status of the computational job; either CREATED, Queued, Running,
                        Checkpointed, Finished, Deleted, Stopped, or Killed.
        b.  queueDateTime,  The datetime when the job was queued (UTC timezone, isoformat).
        c.  runDateTime,    The datetime when the job was initially run (UTC, isoformat).
        d.  id,             A unique id.  The id has the form [publicConsumerToken]::[unique alphanumeric].
        e.  href,           A unique URL to retrieve the result using a RESTful GET.
        f.  jobQueue,       The queue responsible for distributing the job.

"""

    algorithm = 'ForwardRBS'
    params = {}
    params['CDS'] = CDS
    params['translation_init_rate'] = TargetTranslationRate
    params["16S_rRNA"] = rRNASeq
    params['pre_seq'] = preSeq
    params['RBS_init'] = RBSInit
    params['maximize_tir'] = maximizeTIR
    params['algorithm'] = algorithm
    params['algorithm_version'] = algorithmVersion
    response = sendPost(algorithm, params)
    return response

def ForwardRBSwithConstraints(CDS, TargetTranslationRate = 1000, RBSConstraints = "", rRNASeq = "acctcctta", preSeq = "", RBSInit = None, maximizeTIR = False, algorithmVersion = "v1.1"):
    """Calls the RBS Calculator in Forward Engineering mode to design a ribosome binding site sequence with a targeted
    translation initiation rate.

    Input keys include:
    1.  CDS,                The nucleotide sequence of protein coding sequence, including 50+ nt after the start codon.

    2.  TargetTranslationRate,         The targeted translation initiation rate on a proportional scale from >0 to up to 5.4 million.

    3.  RBS_Constraints,    A sequence specifying which nucleotides are allowed at each position using the UIPAC degenerate alphabet.
                            Alphabet includes: A, G, C, T, U, S, W, M, K, R, Y, V, B, D, H, N

    4.  preSeq,             Any mRNA sequence that must appear before the ribosome binding site sequence beginning at the +1.

    5.  rRNASeq,            The last 9 nucleotides of the 16S rRNA (3' end). Depends on bacterial strain.

    6.  RBSInit,            An initial ribosome binding site sequence to begin the optimization. A well-chosen
                            initial sequence will accelerate optimization, particularly when designing an RBS
                            with a very high or very low translation initiation rate.

    7.  maximizeTIR,        True or False. If True, the target translation rate will be set to the maximum possible
                            and optimization will continue for 2000 iterations.

    8.  algorithmVersion,   v1.0 is described in Salis, Mirsky, & Voigt,  Nature Biotech, 2009.
                            v1.1 improvements are described in Salis, Methods in Enzymology, 2011.
                            v1.2 improvements are described in Espah Borujeni, Channasappara, & Salis,
                            Nucleic Acid Research, 2013.

    The output is a JSON serialized dictionary containing all inputs and the following results:
    1.  RBS,                            The designed ribosome binding site sequence
    2.  translation_initiation_rate,    The predicted translation initiation rate of the designed RBS sequence.
    3.  iterations,                     The number of iterations performed by the optimization algorithm.
    4.  MaxIter,                        The maximum number of iterations allowed.

    5.  RBS_list,   A list of predictions, one for each start codon in the mRNA sequence. Each element
                    in the list is a dictionary containing:
        a.  tir,                            The predicted translation initiation rate.
        b.  dG_total,                       The ribosome's Gibbs binding free energy to the mRNA.
        c.  dG_mRNA_rRNA,                   The Gibbs free energy of the mRNA:rRNA complex.
                                            The complex includes both hybridization and intra-molecular folding.
        d.  dG_mRNA,                        The Gibbs free energy of the folded mRNA (minimum free energy).
        e.  dG_spacing,                     The Gibbs free energy penalty for stretching/compression of the
                                            ribosome, due to non-optimal spacing between the rRNA binding site
                                            and the start codon.
        f.  dG_standby,                     The Gibbs binding free energy of the 30S ribosome's platform domain
                                            to standby sites located upstream of the Shine-Dalgarno sequence.
        g.  dG_start,                       The Gibbs binding free energy between the initiating tRNA and the start codon.
        h.  warnings,                       List of warnings issued. Each warning is the tuple (a color, a code, a message).

    6.  JobInfo,    A dictionary containing run-time information:
        a.  status,     The status of the computational job; either CREATED, Queued, Running,
                        Checkpointed, Finished, Deleted, Stopped, or Killed.
        b.  queueDateTime,  The datetime when the job was queued (UTC timezone, isoformat).
        c.  runDateTime,    The datetime when the job was initially run (UTC, isoformat).
        d.  id,             A unique id.  The id has the form [publicConsumerToken]::[unique alphanumeric].
        e.  href,           A unique URL to retrieve the result using a RESTful GET.
        f.  jobQueue,       The queue responsible for distributing the job.

"""

    algorithm = 'ForwardRBS'
    params = {}
    params['CDS'] = CDS
    params['translation_init_rate'] = TargetTranslationRate
    params['RBS_Constraints'] = RBSConstraints
    params["16S_rRNA"] = rRNASeq
    params['pre_seq'] = preSeq
    params['RBS_init'] = RBSInit
    params['maximize_tir'] = maximizeTIR
    params['algorithm'] = algorithm
    params['algorithm_version'] = algorithmVersion
    response = sendPost(algorithm, params)
    return response

def RBSLibraryCalculator_SearchMode(CDS, minTIR = "1", maxTIR = "100000", numVariants = "16", rRNASeq = "acctcctta", preSeq = "", RBSInit = None, algorithmVersion = "v1.0"):
    """Calls the RBS Library Calculator in Search mode to design a ribosome binding site library to maximally cover a selected
    translation rate space between a targeted minimum and maximum rate using the fewest number of RBS variants.

    Input keys include:
    1.  CDS,                The nucleotide sequence of protein coding sequence, including 50+ nt after the start codon.

    2.  MinTIR,             The targeted minimum translation initiation rate in the designed RBS library.

    3.  MaxTIR,             The targeted maximum translation initiation rate in the designed RBS library.

    4.  numVariants,        The targeted number of RBS variants in the RBS library.

    5.  preSeq,             Any mRNA sequence that must appear before the ribosome binding site sequence beginning at the +1.

    6.  rRNASeq,            The last 9 nucleotides of the 16S rRNA (3' end). Depends on bacterial strain.

    7.  RBSInit,            If RBSInit contains only A, G, C, T, U, then the optimization is initialized using it.
                            If RBSInit contains degenerate nucleotides, then it will act as an RBS Constraint.

    8.  algorithmVersion,   v1.0 is described in Farasat, Kushwaha, Collens, Easterbrook, Guido, and Salis, (in review), 2014.

    The output is a JSON serialized dictionary containing all inputs and the following results:
    1.  dRBS_summary,                   List of degenerate ribosome binding site sequence solutions
                                        Each element in the list is a list containing:
        a.  The degenerate ribosome binding site sequence using the UIPAC nucleotide alphabet
        b.  The minimum translation rate within the dRBS library
        c.  The maximum translation rate within the dRBS library
        d.  The number of RBS variants in the dRBS library
        e.  The coverage of the translation rate space using the dRBS library

    2.  dRBS_data,  The complete solution for each RBS variant in each dRBS sequence solution
                    structured as a list of lists. The outerlist iterates over dRBS solutions.
                    The innerlist iterates over RBS variants in each dRBS solution.
                    The inner list is a list of dictionaries containing the following keys/values:
        a.  RBS variant sequence,           The sequence of the RBS variant
        b.  tir,                            The predicted translation initiation rate.
        c.  dG_total,                       The ribosome's Gibbs binding free energy to the mRNA.
        d.  dG_mRNA_rRNA,                   The Gibbs free energy of the mRNA:rRNA complex.
                                            The complex includes both hybridization and intra-molecular folding.
        e.  dG_mRNA,                        The Gibbs free energy of the folded mRNA (minimum free energy).
        f.  dG_spacing,                     The Gibbs free energy penalty for stretching/compression of the
                                            ribosome, due to non-optimal spacing between the rRNA binding site
                                            and the start codon.
        g.  dG_standby,                     The Gibbs binding free energy of the 30S ribosome's platform domain
                                            to standby sites located upstream of the Shine-Dalgarno sequence.
        h.  dG_start,                       The Gibbs binding free energy between the initiating tRNA and the start codon.
        i.  warnings,                       List of warnings issued. Each warning is the tuple (a color, a code, a message).


    3.  CurrentGeneration,                  The number of generations processed by the genetic algorithm.

    4.  JobInfo,    A dictionary containing run-time information:
        a.  status,     The status of the computational job; either CREATED, Queued, Running,
                        Checkpointed, Finished, Deleted, Stopped, or Killed.
        b.  queueDateTime,  The datetime when the job was queued (UTC timezone, isoformat).
        c.  runDateTime,    The datetime when the job was initially run (UTC, isoformat).
        d.  id,             A unique id.  The id has the form [publicConsumerToken]::[unique alphanumeric].
        e.  href,           A unique URL to retrieve the result using a RESTful GET.
        f.  jobQueue,       The queue responsible for distributing the job.
    """

    algorithm = 'RBSLibraryCalculator_SearchMode'
    params = {}
    params['CDS'] = CDS
    params['min_translation_init_rate'] = minTIR
    params['max_translation_init_rate'] = maxTIR
    params['expression_level_width'] = math.log10(maxTIR/minTIR) / int(numVariants)
    params["16S_rRNA"] = rRNASeq
    params['pre_seq'] = preSeq
    params['InitialRBS'] = RBSInit

    params['algorithm'] = algorithm
    params['algorithm_version'] = algorithmVersion
    params['verbose'] = True
    response = sendPost(algorithm, params)
    return response

def RBSLibraryCalculator_GenomeSearchMode(CDS, minTIR = "1", maxTIR = "100000", numVariants = "16", maxConsecutiveDegeneracy = "6", rRNASeq = "acctcctta", preSeq = "", RBSInit = None, algorithmVersion = "v1.0"):
    """Calls the RBS Library Calculator in Genome Editing mode to design a genomic ribosome binding site library to maximally cover a selected
    translation rate space between a targeted minimum and maximum rate, while introducing the fewest number of consecutive genomic mutations.

    Input keys include:
    1.  CDS,                The nucleotide sequence of protein coding sequence, including 50+ nt after the start codon.

    2.  MinTIR,             The targeted minimum translation initiation rate in the designed RBS library.

    3.  MaxTIR,             The targeted maximum translation initiation rate in the designed RBS library.

    4.  numVariants,        The targeted number of RBS variants in the RBS library.

    5.  maxConsecutiveDegeneracy,  The maximum number of consecutive nucleotides that can be targeted for mutation.

    6.  preSeq,             Any mRNA sequence that must appear before the ribosome binding site sequence beginning at the +1.

    7.  rRNASeq,            The last 9 nucleotides of the 16S rRNA (3' end). Depends on bacterial strain.

    8.  RBSInit,            If RBSInit contains only A, G, C, T, U, then the optimization is initialized using it.
                            If RBSInit contains degenerate nucleotides, then it will act as an RBS Constraint.

    9.  algorithmVersion,   v1.0 is described in Farasat, Kushwaha, Collens, Easterbrook, Guido, and Salis, (in review), 2014.

    The output is a JSON serialized dictionary containing all inputs and the following results:
    1.  dRBS_summary,                   List of degenerate ribosome binding site sequence solutions
                                        Each element in the list is a list containing:
        a.  The degenerate ribosome binding site sequence using the UIPAC nucleotide alphabet
        b.  The minimum translation rate within the dRBS library
        c.  The maximum translation rate within the dRBS library
        d.  The number of RBS variants in the dRBS library
        e.  The coverage of the translation rate space using the dRBS library

    2.  dRBS_data,  The complete solution for each RBS variant in each dRBS sequence solution
                    structured as a list of lists. The outerlist iterates over dRBS solutions.
                    The innerlist iterates over RBS variants in each dRBS solution.
                    The inner list is a list of dictionaries containing the following keys/values:
        a.  RBS variant sequence,           The sequence of the RBS variant
        b.  tir,                            The predicted translation initiation rate.
        c.  dG_total,                       The ribosome's Gibbs binding free energy to the mRNA.
        d.  dG_mRNA_rRNA,                   The Gibbs free energy of the mRNA:rRNA complex.
                                            The complex includes both hybridization and intra-molecular folding.
        e.  dG_mRNA,                        The Gibbs free energy of the folded mRNA (minimum free energy).
        f.  dG_spacing,                     The Gibbs free energy penalty for stretching/compression of the
                                            ribosome, due to non-optimal spacing between the rRNA binding site
                                            and the start codon.
        g.  dG_standby,                     The Gibbs binding free energy of the 30S ribosome's platform domain
                                            to standby sites located upstream of the Shine-Dalgarno sequence.
        h.  dG_start,                       The Gibbs binding free energy between the initiating tRNA and the start codon.
        i.  warnings,                       List of warnings issued. Each warning is the tuple (a color, a code, a message).


    3.  CurrentGeneration,                  The number of generations processed by the genetic algorithm.

    4.  JobInfo,    A dictionary containing run-time information:
        a.  status,     The status of the computational job; either CREATED, Queued, Running,
                        Checkpointed, Finished, Deleted, Stopped, or Killed.
        b.  queueDateTime,  The datetime when the job was queued (UTC timezone, isoformat).
        c.  runDateTime,    The datetime when the job was initially run (UTC, isoformat).
        d.  id,             A unique id.  The id has the form [publicConsumerToken]::[unique alphanumeric].
        e.  href,           A unique URL to retrieve the result using a RESTful GET.
        f.  jobQueue,       The queue responsible for distributing the job.
    """
    algorithm = 'RBSLibraryCalculator_GenomeSearchMode'
    params = {}
    params['CDS'] = CDS
    params['min_translation_init_rate'] = minTIR
    params['max_translation_init_rate'] = maxTIR
    params['MaxConsecutiveDegeneracy'] = maxConsecutiveDegeneracy
    params['expression_level_width'] = math.log10(maxTIR/minTIR) / int(numVariants)
    params["16S_rRNA"] = rRNASeq
    params['pre_seq'] = preSeq
    params['InitialRBS'] = RBSInit

    params['algorithm'] = algorithm
    params['algorithm_version'] = algorithmVersion
    params['verbose'] = True
    response = sendPost(algorithm, params)
    return response

def RBSLibraryCalculator_EvaluateMode(CDS, dRBSSequence, rRNASeq = "acctcctta", preSeq = "", algorithmVersion = "v1.1"):
    """Calls the RBS Library Calculator in Evaluate mode to predict the translation initiation rates of all RBS variants in
    an RBS library. The RBS library may have up to 64,000 RBS variants.

    Input keys include:
    1.  CDS,                The nucleotide sequence of protein coding sequence, including 50+ nt after the start codon.

    2.  dRBSSequence,       The degenerate nucleotide sequence encoding the RBS library. Uses the UIPAC degenerate nucleotide code.

    3.  preSeq,             Any mRNA sequence that must appear before the ribosome binding site sequence beginning at the +1.

    4.  rRNASeq,            The last 9 nucleotides of the 16S rRNA (3' end). Depends on bacterial strain.

    5.  algorithmVersion,   v1.0 is described in Salis, Mirsky, & Voigt,  Nature Biotech, 2009.
                            v1.1 improvements are described in Salis, Methods in Enzymology, 2011.
                            v1.2 improvements are described in Espah Borujeni, Channasappara, & Salis,
                            Nucleic Acid Research, 2013.

    The output is a JSON serialized dictionary containing all inputs and the following results:
    1.  dRBS_summary,                   List of degenerate ribosome binding site sequence solutions
                                        Each element in the list is a list containing:
        a.  The degenerate ribosome binding site sequence using the UIPAC nucleotide alphabet
        b.  The minimum translation rate within the dRBS library
        c.  The maximum translation rate within the dRBS library
        d.  The number of RBS variants in the dRBS library
        e.  The coverage of the translation rate space using the dRBS library

    2.  dRBS_data,  The complete solution for each RBS variant in each dRBS sequence solution
                    structured as a list of lists. The outerlist iterates over dRBS solutions.
                    The innerlist iterates over RBS variants in each dRBS solution.
                    The inner list is a list of dictionaries containing the following keys/values:
        a.  RBS variant sequence,           The sequence of the RBS variant
        b.  tir,                            The predicted translation initiation rate.
        c.  dG_total,                       The ribosome's Gibbs binding free energy to the mRNA.
        d.  dG_mRNA_rRNA,                   The Gibbs free energy of the mRNA:rRNA complex.
                                            The complex includes both hybridization and intra-molecular folding.
        e.  dG_mRNA,                        The Gibbs free energy of the folded mRNA (minimum free energy).
        f.  dG_spacing,                     The Gibbs free energy penalty for stretching/compression of the
                                            ribosome, due to non-optimal spacing between the rRNA binding site
                                            and the start codon.
        g.  dG_standby,                     The Gibbs binding free energy of the 30S ribosome's platform domain
                                            to standby sites located upstream of the Shine-Dalgarno sequence.
        h.  dG_start,                       The Gibbs binding free energy between the initiating tRNA and the start codon.
        i.  warnings,                       List of warnings issued. Each warning is the tuple (a color, a code, a message).

    3.  JobInfo,    A dictionary containing run-time information:
        a.  status,     The status of the computational job; either CREATED, Queued, Running,
                        Checkpointed, Finished, Deleted, Stopped, or Killed.
        b.  queueDateTime,  The datetime when the job was queued (UTC timezone, isoformat).
        c.  runDateTime,    The datetime when the job was initially run (UTC, isoformat).
        d.  id,             A unique id.  The id has the form [publicConsumerToken]::[unique alphanumeric].
        e.  href,           A unique URL to retrieve the result using a RESTful GET.
        f.  jobQueue,       The queue responsible for distributing the job.
    """
    algorithm = 'RBSLibraryCalculator_EvaluateMode'
    params = {}
    params['CDS'] = CDS
    params["dRBS"] = dRBSSequence
    params['pre_seq'] = preSeq
    params["16S_rRNA"] = rRNASeq

    params['algorithm'] = algorithm
    params['algorithm_version'] = algorithmVersion
    params['verbose'] = True
    response = sendPost(algorithm, params)
    return response

def OperonCalculator_EvaluateMode(promoter = "", mRNA = "", rRNASeq = "acctcctta", algorithmVersion = "v0.1"):
    """Predicts the translation initiation rate and translational coupling rates for all open reading frames in a bacterial operon.
    Uses the RBS Calculator and Translational Coupling Calculator.

    Input keys include:
    1.  promoter,           The promoter nucleotide sequence responsible for transcribing the operon.
                            (To be used for predictions at a later date.)

    2.  mRNA,               The nucleotide sequence of the entire bacterial operon, beginning with the +1
                            of the mRNA transcript and ending at the end of the transcriptional terminator.

    3.  rRNASeq,            The last 9 nucleotides of the 16S rRNA (3' end). Depends on bacterial strain.

    4.  algorithmVersion,   v1.0 is described in Salis, Mirsky, & Voigt,  Nature Biotech, 2009.
                            v1.1 improvements are described in Salis, Methods in Enzymology, 2011.
                            v1.2 improvements are described in Espah Borujeni, Channasappara, & Salis,
                            Nucleic Acid Research, 2013.

    The output is a JSON serialized dictionary containing all inputs and the following results:
    1.  TranslatedORFs,                     A list of dictionaries describing each translated open reading frame.
                                            Key / values of the dictionary are:
        a.  tir,                            The predicted translation initiation rate of the open reading frame.
        b.  dG_total,                       The apparent Gibbs binding free energy between the 30S ribosome and mRNA.
                                            Accounts for both ribosome re-initiation and de novo initiation.
        c.  intergenic_distance,            The distance between the upstream stop codon and downstream start codon.
        d.  RBS,                            A dictionary containing more information about the calculations. Key/Values:
                                            i.   dG_total
                                            ii.  dG_mRNA_rRNA
                                            iii. dG_coupling
                                            iv.  dG_non_coupling
                                            v.   dG_spacing
                                            vi.  dG_standby
                                            vii. dG_start

    2.  LongssRNARegions,                   A list of mRNA sequence regions that contain long stretches of single-stranded mRNA.
                                            These are likely binding sites for RNAse E.

    3.  LongRNADuplexes,                    A list of mRNA sequence regions that contain long RNA duplexes.
                                            These are likely binding sites for RNAses (III, E, H, P).

    4.  JobInfo,    A dictionary containing run-time information:
        a.  status,     The status of the computational job; either CREATED, Queued, Running,
                        Checkpointed, Finished, Deleted, Stopped, or Killed.
        b.  queueDateTime,  The datetime when the job was queued (UTC timezone, isoformat).
        c.  runDateTime,    The datetime when the job was initially run (UTC, isoformat).
        d.  id,             A unique id.  The id has the form [publicConsumerToken]::[unique alphanumeric].
        e.  href,           A unique URL to retrieve the result using a RESTful GET.
        f.  jobQueue,       The queue responsible for distributing the job.

    """

    algorithm = 'OperonCalculator_EvaluateMode'
    params = {}
    params['promoter' ] =promoter
    params['mRNA'] = mRNA
    params['16S_rRNA'] = rRNASeq
    params['algorithm'] = algorithm
    params['algorithm_version'] = algorithmVersion
    response = sendPost(algorithm, params)
    return response


def RiboswitchCalculator_EvaluateMode(pre_aptamer_seq, aptamer_seq, post_aptamer_seq, aptamer_structure, dG_ligand_aptamer, V_ligand, V_mRNA, mRNA_concentration = None, ligand_concentration = None, rRNASeq = "acctcctta", algorithmVersion = "v1.1"):
    """Calls the Riboswitch Calculator in Evaluate mode to predict the translation rate and activation ratio for an inputted riboswitch sequence and characteristics.

    Input keys include:


    3.  JobInfo,    A dictionary containing run-time information:
        a.  status,     The status of the computational job; either CREATED, Queued, Running,
                        Checkpointed, Finished, Deleted, Stopped, or Killed.
        b.  queueDateTime,  The datetime when the job was queued (UTC timezone, isoformat).
        c.  runDateTime,    The datetime when the job was initially run (UTC, isoformat).
        d.  id,             A unique id.  The id has the form [publicConsumerToken]::[unique alphanumeric].
        e.  href,           A unique URL to retrieve the result using a RESTful GET.
        f.  jobQueue,       The queue responsible for distributing the job.
    """
    algorithm = 'RiboswitchCalculator_EvaluateMode'


    params = {}
    params['CDS'] = CDS
    params["pre_aptamer_seq"] = pre_aptamer_seq
    params['post_aptamer_seq'] = post_aptamer_seq
    params['aptamer_sequence'] = aptamer_sequence
    params['aptamer_structure'] = aptamer_structure
    params['dG_ligand_aptamer'] = dG_ligand_aptamer
    params['V_ligand'] = V_ligand
    params['V_mRNA'] = V_mRNA
    params['mRNA_concentration'] = mRNA_concentration
    params['ligand_concentration'] = ligand_concentration

    params["16S_rRNA"] = rRNASeq

    params['algorithm'] = algorithm
    params['algorithm_version'] = algorithmVersion
    params['verbose'] = True
    response = sendPost(algorithm, params)
    return response

def getNextResult():
    """ A convenience function to continuously loop until a recently updated or finished result is available.
    Returns a JSON serialized dictionary containing the output of a recently updated or finished job."""

    response = sendGet('NextResult', {})
    print response
    status = response['status']
    if status == 'OK':
        result_list = response['Results']
        print status,  result_list
    else:
        print status, response

def getJobStatuses():

    jobList = sendGet('JobStatus', {})
    print jobList
    return jobList

#def OperonCalculator_OptimizeCDSOnly
#def SmallRNACalculator_ReverseEng

if __name__ == "__main__":
    
    #Anderson Library of Promoter Strengths the user can pick from (19)
# promoterStrengths = np.array([1, 0.7, 0.86, 0.01, 0.72, 0.24, 0.47, 0.36, 0.51, 0.04, 0.33, 0.58, 0.10, 0.15, 0.16, 0.06, 0.56])
promoterStrengths = []
 A = 1 # we are keeping A constant as 1
 B = float(raw_input("What is the ratio amount of AFP8:SpyTag desired? 1:"))
    
 ratio = A/B
    
    #need to let the user choose their promoters from a general list
    print "The 17 unique promoters that comprise the Anderson Promoter Library, can be used in the following program. Each of the 17 promoters will be identified. Please type Y if you wish to use this promoter, or N if not. Multiple promoters can be simulated." 
    #    promoterStrengthChosen = float(raw_input("What promoter strength would you like to use? (must be from Anderson Promoter Library)"))
    APromoter1 = raw_input("Would you like to use the promoter with strength 1.0 RPU? ")
    if APromoter1 == 'Y':
        print "yay"
        promoterStrengths.append(APromoter1)
        print promoterStrengths
    else: 
        print "boo"
    #for all promoters, find TIRs s.t. promoter*TIR=1
    #aka make an array of reciprocal values
    
    #target TIRs ---> plug these into calc. get rA
 rATargets = 1/promoterStrengths
 
    #since wont change for A (always 1) can predetermine rA values 
 rA = [[1.0804972462684845, u'CTCTAGGGTACACCTCTACCTTAAAGCACCTTCA', 1.0],[1.5367350374955198, u'CTAAAAACGATCTTCCGCTAGAAAACGCCTTCAGT', 0.69999999999999996],[1.2124375890328924, u'GAGTAGCACAAGGACTAGTCACACCTTCGAT', 0.85999999999999999],[93.02487150575536, u'AACCTACACTTCTAGATATTAAATAGCACAGTCA', 0.01],[1.3629405990255299, u'TACTACCACCCTCCCGACTCACCTTCAATA', 0.71999999999999997], [4.336902233994103, u'ACATAGGATTAGGAAAATTTTTCTTAATACCTTC', 0.23999999999999999],[2.0179533700179495, u'TTCCGGACTAGAAATTCACCTACAATAAC', 0.46999999999999997],[2.9877573582284325,u'AAGCTCAAGTAATCATAAGCTTCATTCTTCGGA',0.35999999999999999],[1.8442539152626343, u'ACTATTCGGGGTACCGAATAGTAAACACCGGCA', 0.51000000000000001],[25.222498148486967,  u'CGCTCAATCCTTTCAGAAATTTACCATCAGT', 0.040000000000000001], [3.328540300332485, u'TCGTTCCCGGATCACGGGAACACAGCACCGTCA', 0.33000000000000002],[16.731536232345533, u'ATCATAGACGGTCGAATTTCCACCAGGTTT', 0.57999999999999996],[9.891173269825766, u'TAGGACTTAGCATAGAGAAACCCTACACCGGCA', 0.10000000000000001],[6.838756157927802, u'AAGATTTAACAATCTATTACCTATCAACGGCT', 0.14999999999999999],[6.502591737898715, u'CCGGCTAACTTTACACATTTCACACCTATCGAT', 0.16],[17.72367109927289,u'ACCTCATACAATACGCCATAGACCACGCTTTCA', 0.059999999999999998],[1.685505995577737, u'CAACGTAGGCTAGCCATAGCTTACACCGGCA', 0.56000000000000005]]   
    
    #repeat this idea for B
    #find TIRs s.t. promoter*TIR=ratio 
    #aka make an array of ratio/promoter
        #note: rB = ratio/rA give an error bc divide by zero
        
     #an array of TIR values that need to be plugged into the calc. Their outputs make an array all close to the ratio amount   
 rBTargets = ratio/promoterStrengths
    
    #Some examples of inputs (Change these accordingly)
 mRNA = "".join([random.choice(('A','G','C','T')) for x in range(35)]) + 'ATG' + "".join([random.choice(('A','G','C','T')) for x in range(35)])
    
 CDS = 'ATGAAGTTATTGAAGGTGGCGGCGATTGCTGCAATCGTGTTCTCAGGCTCCGCGCTTGCGGGCGTGGTACCCCAATACGGTGGTGGGGGCAACCACGGAGGCGGGGGAAATAACTCTGGACCTAACTCTGAGTTAAATATCTATCAATACGGGGGGGGCAACTCCGCGTTGGCCTTGCAAACTGACGCCCGTAATTCTGATCTGACTATCACTCAACATGGTGGGGGAAACGGGGCAGATGTAGGGCAAGGGTCAGATGACTCGTCGATCGACCTGACTCAACGTGGATTTGGGAACAGTGCCACACTTGACCAGTGGAATGGGAAGAACTCTGAGATGACTGTGAAGCAGTTTGGAGGTGGGAACGGGGCTGCTGTCGACCAGACTGCCTCTAATTCCAGCGTCAATGTGACACAAGTTGGGTTTGGAAACAATGCCACGGCGCACCAGTACGGCAGTGGGGGCAGTGGAGGTTCTGGAGGGTCGGGCGGTTCTGGCGGGTCCGGCGGAAGCGGAGGAAGCGGAGGGAGCGGCGGGAGCGGAGGTAGTGGCGGATCGGGCGATTACAAGGACGATGACGACAAGGACACGGCTTCTGATGCAGCAGCCGCAGCTGCCCTTACAGCTGCAAATGCAAAGGCGGCTGCTGAATTAACGGCGGCGAACGCAGCGGCGGCTGCTGCTGCAACAGCGCGTTAA'
    
 RBSConstraints = 'TCTAGA' + 'N'*25 + 'GAATTC'
    
 minTIR = 10**(random.random() * 2)
 maxTIR = minTIR + 10**(3 + random.random() * 2)
 numVariants = 16
    
 dRBS = [random.choice(('A','G','C','T')) for x in range(35)]
 for i in range(3):
     pos = random.randint(0,34)
     dRBS[pos] = random.choice( ('W','S','M','K','R','Y','B','D','H','V','N') )
     dRBS = "".join(dRBS)
    
     RBSInit = "".join([random.choice(('A','G','C','T')) for x in range(35)])
    
     promoter = "".join([random.choice(('A','G','C','T')) for x in range(20)])
     long_mRNA = "".join([random.choice(('A','G','C','T')) for x in range(100)]) + 'ATG' + "".join([random.choice(('A','G','C','T')) for x in range(999)]) + 'ATG' + "".join([random.choice(('A','G','C','T')) for x in range(9)]) + 'TAA' +  "".join([random.choice(('A','G','C','T')) for x in range(999)]) + 'TAA'
    
    #rA = ... (compute rB output of running this with ratio = 1, pick according to chosen promoters)
    #rA = [[2.7305800459197576, u'TAATATTTACCGGAATTACAGCATTAAATCCTTTT'],[1.407827605601825, u'CTCAGAAGTAGCCCGACTTCTATCCCACGCA'],[101.23811878730547, u'AGGTTTTAGGATCTAATAATTTAACGTTAAGACCA']]
    
    #array of rB that comes out of of calculator
     rB = [[0 for col in range(3)] for row in range(len(promoterStrengths))]#for now
     for index in range(0,len(rBTargets)):
         rB[index][2] = promoterStrengths[index]
     
    # send for jobs and store ids in first column
     jobIDs = []
     for index in range(0,len(rBTargets)):
         targetTIR = rBTargets[index]
         jobIDs.append(ForwardRBS(CDS=CDS,TargetTranslationRate = targetTIR)['JobInfo']['id'])
    
#    wait 1 minutes for jobs to process
     print "Please wait for at least 5 minute for jobs to process."
     time.sleep(300)
    
#    You could split the code here (turn off your computer even) and run the following as a fetch script after you get coffee
    
     contflag = True
     counter = 0
    #retrieve responses
     while contflag:
         contflag = False
         for index in range(0,len(rBTargets)):
             time.sleep(.500)
             if rB[index][0] == 0:
                 response = sendGet('Result',{'id' : jobIDs[index]})
                 try:
                     if response['JobInfo']['status'] == u'Finished':
                         print "Ta - Dah! We finished " + jobIDs[index]
                         rB[index][0] = response['translation_init_rate']
                         rB[index][1] = response['RBS']
                     else:
                         counter = counter + 1
                         if counter > 20:
                             print "Keep waiting"
                             counter = 0
                         contflag = True
                 except:
                     print "Error in following result:"
                     print response
 
   
